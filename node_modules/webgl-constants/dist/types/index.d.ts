/**
 * The following defined constants and descriptions are directly ported from https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Constants
 *
 * Any copyright is dedicated to the Public Domain. http://creativecommons.org/publicdomain/zero/1.0/
 *
 * Contributors
 *
 * See: https://developer.mozilla.org/en-US/profiles/Sheppy
 * See: https://developer.mozilla.org/en-US/profiles/fscholz
 * See: https://developer.mozilla.org/en-US/profiles/AtiX
 * See: https://developer.mozilla.org/en-US/profiles/Sebastianz
 *
 * These constants are defined on the WebGLRenderingContext / WebGL2RenderingContext interface
 */
/**
 * Passed to clear to clear the current depth buffer
 * @constant {number}
 */
export declare const GL_DEPTH_BUFFER_BIT: number;
/**
 * Passed to clear to clear the current stencil buffer
 * @constant {number}
 */
export declare const GL_STENCIL_BUFFER_BIT: number;
/**
 * Passed to clear to clear the current color buffer
 * @constant {number}
 */
export declare const GL_COLOR_BUFFER_BIT: number;
/**
 * Passed to drawElements or drawArrays to draw single points
 * @constant {number}
 */
export declare const GL_POINTS: number;
/**
 * Passed to drawElements or drawArrays to draw lines. Each vertex connects to the one after it
 * @constant {number}
 */
export declare const GL_LINES: number;
/**
 * Passed to drawElements or drawArrays to draw lines. Each set of two vertices is treated as a separate line segment
 * @constant {number}
 */
export declare const GL_LINE_LOOP: number;
/**
 * Passed to drawElements or drawArrays to draw a connected group of line segments from the first vertex to the last
 * @constant {number}
 */
export declare const GL_LINE_STRIP: number;
/**
 * Passed to drawElements or drawArrays to draw triangles. Each set of three vertices creates a separate triangle
 * @constant {number}
 */
export declare const GL_TRIANGLES: number;
/**
 * Passed to drawElements or drawArrays to draw a connected group of triangles
 * @constant {number}
 */
export declare const GL_TRIANGLE_STRIP: number;
/**
 * Passed to drawElements or drawArrays to draw a connected group of triangles. Each vertex connects to the previous and the first vertex in the fan
 * @constant {number}
 */
export declare const GL_TRIANGLE_FAN: number;
/**
 * Passed to blendFunc or blendFuncSeparate to turn off a component
 * @constant {number}
 */
export declare const GL_ZERO: number;
/**
 * Passed to blendFunc or blendFuncSeparate to turn on a component
 * @constant {number}
 */
export declare const GL_ONE: number;
/**
 * Passed to blendFunc or blendFuncSeparate to multiply a component by the source elements color
 * @constant {number}
 */
export declare const GL_SRC_COLOR: number;
/**
 * Passed to blendFunc or blendFuncSeparate to multiply a component by one minus the source elements color
 * @constant {number}
 */
export declare const GL_ONE_MINUS_SRC_COLOR: number;
/**
 * Passed to blendFunc or blendFuncSeparate to multiply a component by the source's alpha
 * @constant {number}
 */
export declare const GL_SRC_ALPHA: number;
/**
 * Passed to blendFunc or blendFuncSeparate to multiply a component by one minus the source's alpha
 * @constant {number}
 */
export declare const GL_ONE_MINUS_SRC_ALPHA: number;
/**
 * Passed to blendFunc or blendFuncSeparate to multiply a component by the destination's alpha
 * @constant {number}
 */
export declare const GL_DST_ALPHA: number;
/**
 * Passed to blendFunc or blendFuncSeparate to multiply a component by one minus the destination's alpha
 * @constant {number}
 */
export declare const GL_ONE_MINUS_DST_ALPHA: number;
/**
 * Passed to blendFunc or blendFuncSeparate to multiply a component by the destination's color
 * @constant {number}
 */
export declare const GL_DST_COLOR: number;
/**
 * Passed to blendFunc or blendFuncSeparate to multiply a component by one minus the destination's color
 * @constant {number}
 */
export declare const GL_ONE_MINUS_DST_COLOR: number;
/**
 * Passed to blendFunc or blendFuncSeparate to multiply a component by the minimum of source's alpha or one minus the destination's alpha
 * @constant {number}
 */
export declare const GL_SRC_ALPHA_SATURATE: number;
/**
 * Passed to blendFunc or blendFuncSeparate to specify a constant color blend function
 * @constant {number}
 */
export declare const GL_CONSTANT_COLOR: number;
/**
 * Passed to blendFunc or blendFuncSeparate to specify one minus a constant color blend function
 * @constant {number}
 */
export declare const GL_ONE_MINUS_CONSTANT_COLOR: number;
/**
 * Passed to blendFunc or blendFuncSeparate to specify a constant alpha blend function
 * @constant {number}
 */
export declare const GL_CONSTANT_ALPHA: number;
/**
 * Passed to blendFunc or blendFuncSeparate to specify one minus a constant alpha blend function
 * @constant {number}
 */
export declare const GL_ONE_MINUS_CONSTANT_ALPHA: number;
/**
 * Passed to blendEquation or blendEquationSeparate to set an addition blend function
 * @constant {number}
 */
export declare const GL_FUNC_ADD: number;
/**
 * Passed to blendEquation or blendEquationSeparate to specify a subtraction blend function (source - destination)
 * @constant {number}
 */
export declare const GL_FUNC_SUBSTRACT: number;
/**
 * Passed to blendEquation or blendEquationSeparate to specify a reverse subtraction blend function (destination - source)
 * @constant {number}
 */
export declare const GL_FUNC_REVERSE_SUBTRACT: number;
/**
 * Passed to getParameter to get the current RGB blend function
 * @constant {number}
 */
export declare const GL_BLEND_EQUATION: number;
/**
 * Passed to getParameter to get the current RGB blend function. Same as BLEND_EQUATION
 * @constant {number}
 */
export declare const GL_BLEND_EQUATION_RGB: number;
/**
 * Passed to getParameter to get the current alpha blend function. Same as BLEND_EQUATION
 * @constant {number}
 */
export declare const GL_BLEND_EQUATION_ALPHA: number;
/**
 * Passed to getParameter to get the current destination RGB blend function
 * @constant {number}
 */
export declare const GL_BLEND_DST_RGB: number;
/**
 * Passed to getParameter to get the current source RGB blend function
 * @constant {number}
 */
export declare const GL_BLEND_SRC_RGB: number;
/**
 * Passed to getParameter to get the current destination alpha blend function
 * @constant {number}
 */
export declare const GL_BLEND_DST_ALPHA: number;
/**
 * Passed to getParameter to get the current source alpha blend function
 * @constant {number}
 */
export declare const GL_BLEND_SRC_ALPHA: number;
/**
 * Passed to getParameter to return a the current blend color
 * @constant {number}
 */
export declare const GL_BLEND_COLOR: number;
/**
 * Passed to getParameter to get the array buffer binding
 * @constant {number}
 */
export declare const GL_ARRAY_BUFFER_BINDING: number;
/**
 * Passed to getParameter to get the current element array buffer
 * @constant {number}
 */
export declare const GL_ELEMENT_ARRAY_BUFFER_BINDING: number;
/**
 * Passed to getParameter to get the current lineWidth (set by the lineWidth method)
 * @constant {number}
 */
export declare const GL_LINE_WIDTH: number;
/**
 * Passed to getParameter to get the current size of a point drawn with gl.POINTS
 * @constant {number}
 */
export declare const GL_ALIASED_POINT_SIZE_RANGE: number;
/**
 * Passed to getParameter to get the range of available widths for a line. Returns a length-2 array with the lo value at 0, and hight at 1
 * @constant {number}
 */
export declare const GL_ALIASED_LINE_WIDTH_RANGE: number;
/**
 * Passed to getParameter to get the current value of cullFace. Should return FRONT, BACK, or FRONT_AND_BACK
 * @constant {number}
 */
export declare const GL_CULL_FACE_MODE: number;
/**
 * Passed to getParameter to determine the current value of frontFace. Should return CW or CCW
 * @constant {number}
 */
export declare const GL_FRONT_FACE: number;
/**
 * Passed to getParameter to return a length-2 array of floats giving the current depth range
 * @constant {number}
 */
export declare const GL_DEPTH_RANGE: number;
/**
 * Passed to getParameter to determine if the depth write mask is enabled
 * @constant {number}
 */
export declare const GL_DEPTH_WRITEMASK: number;
/**
 * Passed to getParameter to determine the current depth clear value
 * @constant {number}
 */
export declare const GL_DEPTH_CLEAR_VALUE: number;
/**
 * Passed to getParameter to get the current depth function. Returns NEVER, ALWAYS, LESS, EQUAL, LEQUAL, GREATER, GEQUAL, or NOTEQUAL
 * @constant {number}
 */
export declare const GL_DEPTH_FUNC: number;
/**
 * Passed to getParameter to get the value the stencil will be cleared to
 * @constant {number}
 */
export declare const GL_STENCIL_CLEAR_VALUE: number;
/**
 * Passed to getParameter to get the current stencil function. Returns NEVER, ALWAYS, LESS, EQUAL, LEQUAL, GREATER, GEQUAL, or NOTEQUAL
 * @constant {number}
 */
export declare const GL_STENCIL_FUNC: number;
/**
 * Passed to getParameter to get the current stencil fail function. Should return KEEP, REPLACE, INCR, DECR, INVERT, INCR_WRAP, or DECR_WRAP
 * @constant {number}
 */
export declare const GL_STENCIL_FAIL: number;
/**
 * Passed to getParameter to get the current stencil fail function should the depth buffer test fail. Should return KEEP, REPLACE, INCR, DECR, INVERT, INCR_WRAP, or DECR_WRAP
 * @constant {number}
 */
export declare const GL_STENCIL_PASS_DEPTH_FAIL: number;
/**
 * Passed to getParameter to get the current stencil fail function should the depth buffer test pass. Should return KEEP, REPLACE, INCR, DECR, INVERT, INCR_WRAP, or DECR_WRAP
 * @constant {number}
 */
export declare const GL_STENCIL_PASS_DEPTH_PASS: number;
/**
 * Passed to getParameter to get the reference value used for stencil tests
 * @constant {number}
 */
export declare const GL_STENCIL_REF: number;
/**
 * @constant {number}
 */
export declare const GL_STENCIL_VALUE_MASK: number;
/**
 * @constant {number}
 */
export declare const GL_STENCIL_WRITEMASK: number;
/**
 * @constant {number}
 */
export declare const GL_STENCIL_BACK_FUNC: number;
/**
 * @constant {number}
 */
export declare const GL_STENCIL_BACK_FAIL: number;
/**
 * @constant {number}
 */
export declare const GL_STENCIL_BACK_PASS_DEPTH_FAIL: number;
/**
 * @constant {number}
 */
export declare const GL_STENCIL_BACK_PASS_DEPTH_PASS: number;
/**
 * @constant {number}
 */
export declare const GL_STENCIL_BACK_REF: number;
/**
 * @constant {number}
 */
export declare const GL_STENCIL_BACK_VALUE_MASK: number;
/**
 * @constant {number}
 */
export declare const GL_STENCIL_BACK_WRITEMASK: number;
/**
 * Returns an Int32Array with four elements for the current viewport dimensions
 * @constant {number}
 */
export declare const GL_VIEWPORT: number;
/**
 * Returns an Int32Array with four elements for the current scissor box dimensions
 * @constant {number}
 */
export declare const GL_SCISSOR_BOX: number;
/**
 * @constant {number}
 */
export declare const GL_COLOR_CLEAR_VALUE: number;
/**
 * @constant {number}
 */
export declare const GL_COLOR_WRITEMASK: number;
/**
 * @constant {number}
 */
export declare const GL_UNPACK_ALIGNMENT: number;
/**
 * @constant {number}
 */
export declare const GL_PACK_ALIGNMENT: number;
/**
 * @constant {number}
 */
export declare const GL_MAX_TEXTURE_SIZE: number;
/**
 * @constant {number}
 */
export declare const GL_MAX_VIEWPORT_DIMS: number;
/**
 * @constant {number}
 */
export declare const GL_SUBPIXEL_BITS: number;
/**
 * @constant {number}
 */
export declare const GL_RED_BITS: number;
/**
 * @constant {number}
 */
export declare const GL_GREEN_BITS: number;
/**
 * @constant {number}
 */
export declare const GL_BLUE_BITS: number;
/**
 * @constant {number}
 */
export declare const GL_ALPHA_BITS: number;
/**
 * @constant {number}
 */
export declare const GL_DEPTH_BITS: number;
/**
 * @constant {number}
 */
export declare const GL_STENCIL_BITS: number;
/**
 * @constant {number}
 */
export declare const GL_POLYGON_OFFSET_UNITS: number;
/**
 * @constant {number}
 */
export declare const GL_POLYGON_OFFSET_FACTOR: number;
/**
 * @constant {number}
 */
export declare const GL_TEXTURE_BINDING_2D: number;
/**
 * @constant {number}
 */
export declare const GL_SAMPLE_BUFFERS: number;
/**
 * @constant {number}
 */
export declare const GL_SAMPLES: number;
/**
 * @constant {number}
 */
export declare const GL_SAMPLE_COVERAGE_VALUE: number;
/**
 * @constant {number}
 */
export declare const GL_SAMPLE_COVERAGE_INVERT: number;
/**
 * @constant {number}
 */
export declare const GL_COMPRESSED_TEXTURE_FORMATS: number;
/**
 * @constant {number}
 */
export declare const GL_VENDOR: number;
/**
 * @constant {number}
 */
export declare const GL_RENDERER: number;
/**
 * @constant {number}
 */
export declare const GL_VERSION: number;
/**
 * @constant {number}
 */
export declare const GL_IMPLEMENTATION_COLOR_READ_TYPE: number;
/**
 * @constant {number}
 */
export declare const GL_IMPLEMENTATION_COLOR_READ_FORMAT: number;
/**
 * @constant {number}
 */
export declare const GL_BROWSER_DEFAULT_WEBGL: number;
/**
 * Passed to bufferData as a hint about whether the contents of the buffer are likely to be used often and not change often
 * @constant {number}
 */
export declare const GL_STATIC_DRAW: number;
/**
 * Passed to bufferData as a hint about whether the contents of the buffer are likely to not be used often
 * @constant {number}
 */
export declare const GL_STREAM_DRAW: number;
/**
 * Passed to bufferData as a hint about whether the contents of the buffer are likely to be used often and change often
 * @constant {number}
 */
export declare const GL_DYNAMIC_DRAW: number;
/**
 * Passed to bindBuffer or bufferData to specify the type of buffer being used
 * @constant {number}
 */
export declare const GL_ARRAY_BUFFER: number;
/**
 * Passed to bindBuffer or bufferData to specify the type of buffer being used
 * @constant {number}
 */
export declare const GL_ELEMENT_ARRAY_BUFFER: number;
/**
 * Passed to getBufferParameter to get a buffer's size
 * @constant {number}
 */
export declare const GL_BUFFER_SIZE: number;
/**
 * Passed to getBufferParameter to get the hint for the buffer passed in when it was created
 * @constant {number}
 */
export declare const GL_BUFFER_USAGE: number;
/**
 * Passed to getVertexAttrib to read back the current vertex attribute
 * @constant {number}
 */
export declare const GL_CURRENT_VERTEX_ATTRIB: number;
/**
 * @constant {number}
 */
export declare const GL_VERTEX_ATTRIB_ARRAY_ENABLED: number;
/**
 * @constant {number}
 */
export declare const GL_VERTEX_ATTRIB_ARRAY_SIZE: number;
/**
 * @constant {number}
 */
export declare const GL_VERTEX_ATTRIB_ARRAY_STRIDE: number;
/**
 * @constant {number}
 */
export declare const GL_VERTEX_ATTRIB_ARRAY_TYPE: number;
/**
 * @constant {number}
 */
export declare const GL_VERTEX_ATTRIB_ARRAY_NORMALIZED: number;
/**
 * @constant {number}
 */
export declare const GL_VERTEX_ATTRIB_ARRAY_POINTER: number;
/**
 * @constant {number}
 */
export declare const GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: number;
/**
 * Passed to enable/disable to turn on/off culling. Can also be used with getParameter to find the current culling method
 * @constant {number}
 */
export declare const GL_CULL_FACE: number;
/**
 * Passed to cullFace to specify that only front faces should be culled
 * @constant {number}
 */
export declare const GL_FRONT: number;
/**
 * Passed to cullFace to specify that only back faces should be culled
 * @constant {number}
 */
export declare const GL_BACK: number;
/**
 * Passed to cullFace to specify that front and back faces should be culled
 * @constant {number}
 */
export declare const GL_FRONT_AND_BACK: number;
/**
 * Passed to enable/disable to turn on/off blending. Can also be used with getParameter to find the current blending method
 * @constant {number}
 */
export declare const GL_BLEND: number;
/**
 * Passed to enable/disable to turn on/off the depth test. Can also be used with getParameter to query the depth test
 * @constant {number}
 */
export declare const GL_DEPTH_TEST: number;
/**
 * Passed to enable/disable to turn on/off dithering. Can also be used with getParameter to find the current dithering method
 * @constant {number}
 */
export declare const GL_DITHER: number;
/**
 * Passed to enable/disable to turn on/off the polygon offset. Useful for rendering hidden-line images, decals, and or solids with highlighted edges. Can also be used with getParameter to query the scissor test
 * @constant {number}
 */
export declare const GL_POLYGON_OFFSET_FILL: number;
/**
 * Passed to enable/disable to turn on/off the alpha to coverage. Used in multi-sampling alpha channels
 * @constant {number}
 */
export declare const GL_SAMPLE_ALPHA_TO_COVERAGE: number;
/**
 * Passed to enable/disable to turn on/off the sample coverage. Used in multi-sampling
 * @constant {number}
 */
export declare const GL_SAMPLE_COVERAGE: number;
/**
 * Passed to enable/disable to turn on/off the scissor test. Can also be used with getParameter to query the scissor test
 * @constant {number}
 */
export declare const GL_SCISSOR_TEST: number;
/**
 * Passed to enable/disable to turn on/off the stencil test. Can also be used with getParameter to query the stencil test
 * @constant {number}
 */
export declare const GL_STENCIL_TEST: number;
/**
 * Returned from getError
 * @constant {number}
 */
export declare const GL_NO_ERROR: number;
/**
 * Returned from getError
 * @constant {number}
 */
export declare const GL_INVALID_ENUM: number;
/**
 * Returned from getError
 * @constant {number}
 */
export declare const GL_INVALID_VALUE: number;
/**
 * Returned from getError
 * @constant {number}
 */
export declare const GL_INVALID_OPERATION: number;
/**
 * Returned from getError
 * @constant {number}
 */
export declare const GL_OUT_OF_MEMORY: number;
/**
 * Returned from getError
 * @constant {number}
 */
export declare const GL_CONTEXT_LOST_WEBGL: number;
/**
 * Passed to frontFace to specify the front face of a polygon is drawn in the clockwise direction,
 * @constant {number}
 */
export declare const GL_CW: number;
/**
 * Passed to frontFace to specify the front face of a polygon is drawn in the counter clockwise direction
 * @constant {number}
 */
export declare const GL_CCW: number;
/**
 * There is no preference for this behavior
 * @constant {number}
 */
export declare const GL_DONT_CARE: number;
/**
 * The most efficient behavior should be used
 * @constant {number}
 */
export declare const GL_FASTEST: number;
/**
 * The most correct or the highest quality option should be used
 * @constant {number}
 */
export declare const GL_NICEST: number;
/**
 * Hint for the quality of filtering when generating mipmap images with WebGLRenderingContext.generateMipmap()
 * @constant {number}
 */
export declare const GL_GENERATE_MIPMAP_HINT: number;
/**
 * @constant {number}
 */
export declare const GL_BYTE: number;
/**
 * @constant {number}
 */
export declare const GL_UNSIGNED_BYTE: number;
/**
 * @constant {number}
 */
export declare const GL_SHORT: number;
/**
 * @constant {number}
 */
export declare const GL_UNSIGNED_SHORT: number;
/**
 * @constant {number}
 */
export declare const GL_INT: number;
/**
 * @constant {number}
 */
export declare const GL_UNSIGNED_INT: number;
/**
 * @constant {number}
 */
export declare const GL_FLOAT: number;
/**
 * @constant {number}
 */
export declare const GL_DEPTH_COMPONENT: number;
/**
 * @constant {number}
 */
export declare const GL_ALPHA: number;
/**
 * @constant {number}
 */
export declare const GL_RGB: number;
/**
 * @constant {number}
 */
export declare const GL_RGBA: number;
/**
 * @constant {number}
 */
export declare const GL_LUMINANCE: number;
/**
 * @constant {number}
 */
export declare const GL_LUMINANCE_ALPHA: number;
/**
 * @constant {number}
 */
export declare const GL_UNSIGNED_SHORT_4_4_4_4: number;
/**
 * @constant {number}
 */
export declare const GL_UNSIGNED_SHORT_5_5_5_1: number;
/**
 * @constant {number}
 */
export declare const GL_UNSIGNED_SHORT_5_6_5: number;
/**
 * Passed to createShader to define a fragment shader
 * @constant {number}
 */
export declare const GL_FRAGMENT_SHADER: number;
/**
 * Passed to createShader to define a vertex shader
 * @constant {number}
 */
export declare const GL_VERTEX_SHADER: number;
/**
 * Passed to getShaderParamter to get the status of the compilation. Returns false if the shader was not compiled. You can then query getShaderInfoLog to find the exact error
 * @constant {number}
 */
export declare const GL_COMPILE_STATUS: number;
/**
 * Passed to getShaderParamter to determine if a shader was deleted via deleteShader. Returns true if it was, false otherwise
 * @constant {number}
 */
export declare const GL_DELETE_STATUS: number;
/**
 * Passed to getProgramParameter after calling linkProgram to determine if a program was linked correctly. Returns false if there were errors. Use getProgramInfoLog to find the exact error
 * @constant {number}
 */
export declare const GL_LINK_STATUS: number;
/**
 * Passed to getProgramParameter after calling validateProgram to determine if it is valid. Returns false if errors were found
 * @constant {number}
 */
export declare const GL_VALIDATE_STATUS: number;
/**
 * Passed to getProgramParameter after calling attachShader to determine if the shader was attached correctly. Returns false if errors occurred
 * @constant {number}
 */
export declare const GL_ATTACHED_SHADERS: number;
/**
 * Passed to getProgramParameter to get the number of attributes active in a program
 * @constant {number}
 */
export declare const GL_ACTIVE_ATTRIBUTES: number;
/**
 * Passed to getProgramParamter to get the number of uniforms active in a program
 * @constant {number}
 */
export declare const GL_ACTIVE_UNIFORMS: number;
/**
 * The maximum number of entries possible in the vertex attribute list
 * @constant {number}
 */
export declare const GL_MAX_VERTEX_ATTRIBS: number;
/**
 * @constant {number}
 */
export declare const GL_MAX_VERTEX_UNIFORM_VECTORS: number;
/**
 * @constant {number}
 */
export declare const GL_MAX_VARYING_VECTORS: number;
/**
 * @constant {number}
 */
export declare const GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS: number;
/**
 * @constant {number}
 */
export declare const GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS: number;
/**
 * Implementation dependent number of maximum texture units. At least 8
 * @constant {number}
 */
export declare const GL_MAX_TEXTURE_IMAGE_UNITS: number;
/**
 * @constant {number}
 */
export declare const GL_MAX_FRAGMENT_UNIFORM_VECTORS: number;
/**
 * @constant {number}
 */
export declare const GL_SHADER_TYPE: number;
/**
 * @constant {number}
 */
export declare const GL_SHADING_LANGUAGE_VERSION: number;
/**
 * @constant {number}
 */
export declare const GL_CURRENT_PROGRAM: number;
/**
 * Passed to depthFunction or stencilFunction to specify depth 